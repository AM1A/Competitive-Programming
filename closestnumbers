#include <stdio.h>
#include <string.h>
#include <math.h>
#include <stdlib.h>

void swap(int* a, int* b)
{
    int t = *a;
    *a = *b;
    *b = t;
}

int partition (int arr[], int low, int high)
{
    int pivot = arr[high];   
    int i = (low - 1);  
 
    for (int j = low; j <= high- 1; j++)
    {
       
        if (arr[j] <= pivot)
        {
            i++;   
            swap(&arr[i], &arr[j]);
        }
    }
    swap(&arr[i + 1], &arr[high]);
    return (i + 1);
}
 

void quickSort(int arr[], int low, int high)
{
    if (low < high)
    {
        
        int pi = partition(arr, low, high);
 
        quickSort(arr, low, pi - 1);
        quickSort(arr, pi + 1, high);
    }
}

int main() 
{

    /* Enter your code here. Read input from STDIN. Print output to STDOUT */
    int n,i,j,temp,min = 20000002;
    scanf("%d\n",&n);
    int arr2[(2*n)];
    for(i = 0;i<2*n;i++)
    {
        arr2[i] = 10000004;
    }
    int arr[n];
    for(i = 0;i<n;i++)
    {
        scanf("%d ",&arr[i]);
    }
    /*for(i = 0;i<n;i++)
    {
        for(j = 0;j<n-i-1;j++)
        {
            if(arr[j]>arr[j+1])
            {
                temp = arr[j];
                arr[j] = arr[j+1];
                arr[j+1] = temp;
            }
        }
    }*/
    quickSort(arr,0,n-1);
    int l = 0;
    for(i = 0;i<n-1;i++)
    {
        if(abs(arr[i+1]-arr[i])<min)
        {
            min = abs(arr[i+1]-arr[i]);
          /*  arr2[l] = arr[i];
            l++;
            arr2[l] = arr[i+1];
            l++;*/
        }
    }
    
    for(i = 0;i<n-1;i++)
    {
        if(abs(arr[i+1]-arr[i])<min)
        {
            min = abs(arr[i+1]-arr[i]);
          /*  arr2[l] = arr[i];
            l++;
            arr2[l] = arr[i+1];
            l++;*/
        }
    }
    for(i = 0;i<n-1;i++)
    {
        if(abs(arr[i+1]-arr[i])==min)
        {
            //min = abs(arr[i+1]-arr[i]);
            arr2[l] = arr[i];
            l++;
            arr2[l] = arr[i+1];
            l++;
        }
    }
    
    
    i = 0;
    while(arr2[i]!=10000004)
    {
        printf("%d ",arr2[i]);
        i++;
    }
    return 0;
}
