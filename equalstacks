#include <math.h>
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <assert.h>
#include <limits.h>
#include <stdbool.h>

int pop(int *h,int size)
{
    int i = h[size-1];
    return i;
}
void sort(int* arr,int n)
{
    int key,i,j;
    for(i = 1;i<n;i++)
    {
      for(j = i+1;j<n;j++)
      {
          if(arr[i]<arr[j])
          {
              key = arr[i];
              arr[i] = arr[j];
              arr[j] = key;
          }
      }
    }
}

int main()
{
    int n1,m1 = 0; 
    int n2,m2 = 0; 
    int n3,m3 = 0; 
    scanf("%d %d %d",&n1,&n2,&n3);
    int *h1 = malloc(sizeof(int) * n1);
    for(int h1_i = 0; h1_i < n1; h1_i++)
    {
       scanf("%d",&h1[h1_i]);
       m1 = m1+h1[h1_i]; 
    }
    int *h2 = malloc(sizeof(int) * n2);
    for(int h2_i = 0; h2_i < n2; h2_i++)
    {
       scanf("%d",&h2[h2_i]);
       m2 = m2+h2[h2_i];
    }
    int *h3 = malloc(sizeof(int) * n3);
    for(int h3_i = 0; h3_i < n3; h3_i++)
    {
       scanf("%d",&h3[h3_i]);
        m3 = m3+h3[h3_i];
    }
    int *s1 = malloc(sizeof(int) * n1);
    int *s2 = malloc(sizeof(int) * n2);
    int *s3 = malloc(sizeof(int) * n3);
    int i1,i2,i3;
    int val = 0,val1 = 0,val2 = 0,val3 = 0;
    if((m1==m2)&&(m2==m3))
    {
        val=m1;
        printf("%d",val);
        return 0;
    }
    else
    {
    s1[0] = h1[n1-1];
    s2[0] = h2[n2-1];
    s3[0] = h3[n3-1];
    int max1 = -1,max2 = -1,max3 = -1,max = -1;
    
    for(i1 = 1;i1<n1;i1++)
    {
        s1[i1] = s1[i1-1]+h1[n1-i1-1];
        //s2[i2] = s2[i2-1]+h2[n2-i2-1];
        //s3[i3] = s3[i3-1]+h3[n3-i3-1];
        
    }
    
    for(i2 = 1;i2<n2;i2++)
    {
        //s1[i1] = s1[i1-1]+h1[n1-i1-1];
        s2[i2] = s2[i2-1]+h2[n2-i2-1];
        //s3[i3] = s3[i3-1]+h3[n3-i3-1];
        
    }
    
     for(i3 = 1;i3<n3;i3++)
    {
        //s1[i1] = s1[i1-1]+h1[n1-i1-1];
        //s2[i2] = s2[i2-1]+h2[n2-i2-1];
        s3[i3] = s3[i3-1]+h3[n3-i3-1];
        
    }    
        if(s1[n1-1]!=m1)
        {
            printf("error");
        }
       // sort(s1,n1);
        //sort(s2,n2);
        //sort(s3,n3);
        /*for(i1 = 0;i1<n3;i1++)
        {
            printf("%d ",s3[i1]);
        }*/
        /*if(s1[0]==m1)
        {
            printf("error2");
        }*/
    int temp = n1<n2?n1:n2;
    int finm = temp<n3?temp:n3;
    int tmp2 = n1>n2?n1:n2;
    int mx = tmp2>n3?tmp2:n3;
    int med = n1+n2+n3-mx-finm;
    int cmpv = -1;
    if(finm==n1&&med==n2)                   //6
    {
        for(i1 = n1-1;i1>=0;i1--)
    {
        for(i2 = n2-1;i2>=0;i2--)
        {
            if(s1[i1]==s2[i2])
            {
                cmpv = s1[i1];
                break;
            }
        }
        for(i3 = n3-1;i3>=0;i3--)
            {
                if(cmpv==s3[i3])
                {
                    val = cmpv;
                    printf("%d",val);
                    return 0;
                }
            }
    }
    }
        if(finm==n2&&med==n3)               //5
    {
        for(i1 = n2-1;i1>=0;i1--)
    {
        for(i2 = n3-1;i2>=0;i2--)
        {
            if(s2[i1]==s3[i2])
            {
                cmpv = s2[i1];
                break;
            }
        }
        for(i3 = n1-1;i3>=0;i3--)
            {
                if(cmpv==s1[i3])
                {
                    val = cmpv;
                    printf("%d",val);
                    return 0;
                }
            }
    }
    }
        if(finm==n3&&med==n1)               //4
    {
        for(i1 = n3-1;i1>=0;i1--)
    {
        for(i2 = n1-1;i2>=0;i2--)
        {
            if(s3[i1]==s1[i2])
            {
                cmpv = s3[i1];
                break;
            }
        }
        for(i3 = n2-1;i3>=0;i3--)
            {
                if(cmpv==s2[i3])
                {
                    val = cmpv;
                    printf("%d",val);
                    return 0;
                }
            }
    }
    }
            if(finm==n2&&med==n1)               //3
    {
        for(i1 = n2-1;i1>=0;i1--)
    {
        for(i2 = n1-1;i2>=0;i2--)
        {
            if(s2[i1]==s1[i2])
            {
                cmpv = s2[i1];
                break;
            }
        }
        for(i3 = n3-1;i3>=0;i3--)
            {
                if(cmpv==s3[i3])
                {
                    val = cmpv;
                    printf("%d",val);
                    return 0;
                }
            }
    }
    }
        if(finm==n3&&med==n2)               //2
    {
        for(i1 = n3-1;i1>=0;i1--)
    {
        for(i2 = n2-1;i2>=0;i2--)
        {
            if(s3[i1]==s2[i2])
            {
                cmpv = s3[i1];
                break;
            }
        }
        for(i3 = n1-1;i3>=0;i3--)
            {
                if(cmpv==s1[i3])
                {
                    val = cmpv;
                    printf("%d",val);
                    return 0;
                }
            }
    }
    }
        
        if(finm==n1&&med==n3)                   //1
    {
        for(i1 = n1-1;i1>=0;i1--)
    {
        for(i2 = n3-1;i2>=0;i2--)
        {
            if(s1[i1]==s3[i2])
            {
                cmpv = s1[i1];
                break;
            }
        }
        for(i3 = n2-1;i3>=0;i3--)
            {
                if(cmpv==s2[i3])
                {
                    val = cmpv;
                    printf("%d",val);
                    return 0;
                }
            }
    }
    }

  /* for(i1 = 0;i1<n1;i1++)
    {
        for(i2 = 0;i2<n3;i2++)
        {
            if(val==s3[i2])
            {
                val==s3[i2];
                break;
            }
        }
    }
    */
    printf("%d",val);
    }
    
    return 0;
}
